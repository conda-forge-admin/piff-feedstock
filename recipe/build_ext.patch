diff --git a/setup.py b/setup.py
index fe2398d..74e859d 100644
--- a/setup.py
+++ b/setup.py
@@ -4,45 +4,11 @@ import urllib.request as urllib2
 import tarfile
 import glob

-try:
-    from setuptools import setup, Extension, find_packages
-    from setuptools.command.build_ext import build_ext
-    from setuptools.command.install_scripts import install_scripts
-    from setuptools.command.easy_install import easy_install
-    import setuptools
-    print("Using setuptools version",setuptools.__version__)
-except ImportError:
-    print('Unable to import setuptools.  Using distutils instead.')
-    from distutils.core import setup, Extension
-    from distutils.command.build_ext import build_ext
-    from distutils.command.install_scripts import install_scripts
-    easy_install = object  # Prevent error when using as base class
-    import distutils
-    # cf. http://stackoverflow.com/questions/1612733/including-non-python-files-with-setup-py
-    from distutils.command.install import INSTALL_SCHEMES
-    for scheme in INSTALL_SCHEMES.values():
-        scheme['data'] = scheme['purelib']
-    # cf. http://stackoverflow.com/questions/37350816/whats-distutils-equivalent-of-setuptools-find-packages-python
-    from distutils.util import convert_path
-    def find_packages(base_path='.'):
-        base_path = convert_path(base_path)
-        found = []
-        for root, dirs, files in os.walk(base_path, followlinks=True):
-            dirs[:] = [d for d in dirs if d[0] != '.' and d not in ('ez_setup', '__pycache__')]
-            relpath = os.path.relpath(root, base_path)
-            parent = relpath.replace(os.sep, '.').lstrip('.')
-            if relpath != '.' and parent not in found:
-                # foo.bar package but no foo package, skip
-                continue
-            for dir in dirs:
-                if os.path.isfile(os.path.join(root, dir, '__init__.py')):
-                    package = '.'.join((parent, dir)) if parent else dir
-                    found.append(package)
-        return found
-    print("Using distutils version",distutils.__version__)
-
-from distutils.command.install_headers import install_headers
-from pybind11.setup_helpers import Pybind11Extension
+from setuptools import setup, find_packages
+import setuptools
+print("Using setuptools version",setuptools.__version__)
+
+from pybind11.setup_helpers import Pybind11Extension, build_ext

 try:
     from sysconfig import get_config_vars
@@ -413,8 +379,6 @@ class my_builder( build_ext ):
         else:
             print('Using compiler %s, which is %s'%(cc,comp_type))
         # Add the appropriate extra flags for that compiler.
-        eigen_path = find_eigen_dir(output=True)
-        pybind_path = find_pybind_path()
         for e in self.extensions:
             e.extra_compile_args = copt[ comp_type ]
             e.extra_link_args = lopt[ comp_type ]
@@ -424,26 +388,6 @@ class my_builder( build_ext ):
         # Now run the normal build function.
         build_ext.build_extensions(self)

-# AFAICT, setuptools doesn't provide any easy access to the final installation location of the
-# executable scripts.  This bit is just to save the value of script_dir so I can use it later.
-# cf. http://stackoverflow.com/questions/12975540/correct-way-to-find-scripts-directory-from-setup-py-in-python-distutils/
-class my_easy_install( easy_install ):  # For setuptools
-
-    # Match the call signature of the easy_install version.
-    def write_script(self, script_name, contents, mode="t", *ignored):
-        # Run the normal version
-        easy_install.write_script(self, script_name, contents, mode, *ignored)
-        # Save the script install directory in the distribution object.
-        # This is the same thing that is returned by the setup function.
-        self.distribution.script_install_dir = self.script_dir
-
-# For distutils, the appropriate thing is the install_scripts command class, not easy_install.
-# So here is the appropriate thing in that case.
-class my_install_scripts( install_scripts ):  # For distutils
-    def run(self):
-        install_scripts.run(self)
-        self.distribution.script_install_dir = self.install_dir
-
 build_dep = ['setuptools>=38', 'numpy>=1.17', 'pybind11>=2.2']
 run_dep = ['galsim>=2.3', 'numpy>=1.17', 'scipy>=1.2', 'pyyaml>=5.1', 'treecorr>=4.3.1', 'fitsio>=1.0', 'matplotlib>=3.3', 'LSSTDESC.Coord>=1.0', 'treegp>=0.6', 'threadpoolctl>=3.1']

@@ -463,7 +407,12 @@ else:
 print('Piff version is %s'%(piff_version))

 sources = glob.glob(os.path.join('src','*.cpp'))
-ext = Pybind11Extension("piff._piff", sources)
+
+ext = Pybind11Extension(
+        "piff._piff",
+        sources,
+        include_dirs=[find_eigen_dir(output=True), find_pybind_path()]
+      )

 dist = setup(name="Piff",
       version=piff_version,
@@ -479,25 +428,6 @@ dist = setup(name="Piff",
       setup_requires=build_dep,
       install_requires=run_dep,
       ext_modules=[ext],
-      cmdclass = {'build_ext': my_builder,
-                  'install_scripts': my_install_scripts,
-                  'easy_install': my_easy_install,
-                  },
+      cmdclass = {'build_ext': build_ext},
       scripts=scripts
       )
-
-# Check that the path includes the directory where the scripts are installed.
-# NB. If not running install, then script_install_dir won't be there...
-real_env_path = [os.path.realpath(d) for d in os.environ['PATH'].split(':')]
-if (hasattr(dist,'script_install_dir') and
-    dist.script_install_dir not in os.environ['PATH'].split(':') and
-    os.path.realpath(dist.script_install_dir) not in real_env_path):
-
-    print('\nWARNING: The Piff executables were installed in a directory not in your PATH')
-    print('         If you want to use the executables, you should add the directory')
-    print('\n             ',dist.script_install_dir,'\n')
-    print('         to your path.  The current path is')
-    print('\n             ',os.environ['PATH'],'\n')
-    print('         Alternatively, you can specify a different prefix with --prefix=PREFIX,')
-    print('         in which case the scripts will be installed in PREFIX/bin.')
-    print('         If you are installing via pip use --install-option="--prefix=PREFIX"')
